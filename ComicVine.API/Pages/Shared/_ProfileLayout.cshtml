@using ComicVine.API.Pages
<!DOCTYPE html>
<html lang="en">
<head>
    <title>@Html.Raw(ViewData[Keys.Title])</title>
    <meta charset="UTF-8"/>
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <link rel="stylesheet" href="/css/main.css">
</head>

<body>
    <header>
        <nav class="layout-nav profile-nav">
                <a href="/forums" class="nav-item">
                    <img src="/images/logo.png" alt="logo" id="nav-logo"/>
                </a>
                <span class="@Util.GetHighlightClass(ViewData, ProfileHighlight.Main)">
                    <a href="@Util.Profile.GetLink(ViewData, "/profile/")">
                        Profile
                    </a>
                </span>
                @if ((bool?)ViewData[Keys.ProfileHasImage] ?? false) {
                }
                <span class="@Util.GetHighlightClass(ViewData, ProfileHighlight.Images)">
                    <a href="@Util.Profile.GetLink(ViewData, "/profile/images/")">
                        Images
                    </a>
                </span>
                @if ((bool?)ViewData[Keys.ProfileHasBlog] ?? false) {
                }
                <span class="@Util.GetHighlightClass(ViewData, ProfileHighlight.Blogs)">
                    <a href="@Util.Profile.GetLink(ViewData, "/profile/blogs/")">
                        Blogs
                    </a>
                </span>
                <span class="@Util.GetHighlightClass(ViewData, ProfileHighlight.Threads)">
                    <a href="@Util.Profile.GetLink(ViewData, "/profile/threads/")">
                        Threads
                    </a>
                </span>
                <span class="@Util.GetHighlightClass(ViewData, ProfileHighlight.Posts)">
                    <a href="@Util.Profile.GetLink(ViewData, "/profile/posts/")">
                        Posts
                    </a>
                </span>
        </nav>
    </header>

    <main class="layout-profile">
        @RenderBody()
    </main>

        @await Html.PartialAsync("Shared/Components/Footer")
<script>
// loads lazy images
let lazyLoad = node =>
    node.setAttribute("src", node.getAttribute("data-src"))

document
    .querySelectorAll(".js-lazy-load-image")
    .forEach(lazyLoad)
</script>
</body>
</html>