@using VinePlus.Web.Pages
<!DOCTYPE html>
<html lang="en">
<head>
    <title>@Html.Raw(ViewData[Keys.Title])</title>
    <meta charset="UTF-8"/>
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <link rel="stylesheet" href="/css/main.css">
</head>

<body>
    <div class="layout">
        <nav class="layout-nav profile-nav">
            <a href="/forums" class="nav-item">
                <img src="/images/logo.png" alt="logo" id="nav-logo"/>
            </a>
            <span class="@Helpers.getHighlightClass(ViewData, ProfileHighlight.Main)">
                <a href="@Helpers.getProfileLink(ViewData, "/profile/")">
                    Profile
                </a>
            </span>
            @if ((bool?)ViewData[Keys.ProfileHasImage] ?? false) {
            }
            <span class="@Helpers.getHighlightClass(ViewData, ProfileHighlight.Images)">
                <a href="@Helpers.getProfileLink(ViewData, "/profile/images/")">
                    Images
                </a>
            </span>
            @if ((bool?)ViewData[Keys.ProfileHasBlog] ?? false) {
            }
            <span class="@Helpers.getHighlightClass(ViewData, ProfileHighlight.Blogs)">
                <a href="@Helpers.getProfileLink(ViewData, "/profile/blogs/")">
                    Blogs
                </a>
            </span>
            <span class="@Helpers.getHighlightClass(ViewData, ProfileHighlight.Threads)">
                <a href="@Helpers.getProfileLink(ViewData, "/profile/threads/")">
                    Threads
                </a>
            </span>
            <span class="@Helpers.getHighlightClass(ViewData, ProfileHighlight.Posts)">
                <a href="@Helpers.getProfileLink(ViewData, "/profile/posts/")">
                    Posts
                </a>
            </span>
        </nav>

        <main class="layout-profile">
            @RenderBody()
        </main>

        @await Html.PartialAsync("Shared/Components/Footer")
    </div>
<script>
// loads lazy images
document
    .querySelectorAll(".js-lazy-load-image")
    .forEach(node =>
        node.setAttribute("src", node.getAttribute("data-src"))
    )
// loads lazy videos
document
    .querySelectorAll(".js-lazy-load-video")
    .forEach(vid => {
        if (vid.getAttribute("data-lazy-load")) {
            const iframe = document.createElement("iframe")
            for (const attr of vid.attributes) {
                iframe.setAttributeNS(null, attr.name, attr.value)
            }
            iframe.setAttributeNS(null, "data-lazy-load", false)
            vid.replaceWith(iframe)
        }
    })

</script>
</body>
</html>